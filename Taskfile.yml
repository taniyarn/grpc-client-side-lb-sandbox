version: "3"
tasks:
  gen:
    desc: "Generate Go code from proto files using Docker"
    cmds:
      - |
        docker run --rm -v $(pwd):/workspace -w /workspace \
          golang:1.22-alpine sh -c '
            apk add --no-cache protobuf && \
            go install google.golang.org/protobuf/cmd/protoc-gen-go@latest && \
            go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest && \
            export PATH=$PATH:/go/bin && \
            protoc --go_out=. --go_opt=paths=source_relative \
                   --go-grpc_out=. --go-grpc_opt=paths=source_relative \
                   proto/*.proto
          '

  server:
    desc: "Start all server instances"
    cmds:
      - docker-compose up -d server1 server2 server3

  server:1:
    desc: "Start server instance 1"
    cmds:
      - docker-compose up -d server1

  server:2:
    desc: "Start server instance 2"
    cmds:
      - docker-compose up -d server2

  server:3:
    desc: "Start server instance 3"
    cmds:
      - docker-compose up -d server3

  client:
    desc: "Start proxy server"
    cmds:
      - docker-compose up -d proxy

  up:
    desc: "Start all services (server instances and proxy)"
    cmds:
      - task: server
      - task: client

  down:
    desc: "Stop all services"
    cmds:
      - docker-compose down

  build:
    desc: "Build Docker images"
    cmds:
      - docker-compose build

  rebuild:
    desc: "Rebuild Docker images without cache"
    cmds:
      - docker-compose build --no-cache

  clean:
    desc: "Remove Docker images, containers, and volumes"
    cmds:
      - docker-compose down --rmi all --volumes

  restart:
    desc: "Restart all services with fresh builds"
    cmds:
      - task: down
      - task: up

  logs:
    desc: "Show logs from all services"
    cmds:
      - docker-compose logs -f

  logs:server:
    desc: "Show logs from all server instances"
    cmds:
      - docker-compose logs -f server1 server2 server3

  logs:server1:
    desc: "Show logs from server instance 1"
    cmds:
      - docker-compose logs -f server1

  logs:server2:
    desc: "Show logs from server instance 2"
    cmds:
      - docker-compose logs -f server2

  logs:server3:
    desc: "Show logs from server instance 3"
    cmds:
      - docker-compose logs -f server3

  logs:proxy:
    desc: "Show logs from proxy server"
    cmds:
      - docker-compose logs -f proxy

  follow-logs:
    desc: "Follow logs from all services in real-time"
    cmds:
      - docker-compose logs -f --tail=100

  verify-lb:
    desc: "Send multiple requests and verify load balancing is working"
    cmds:
      - |
        echo "Sending 20 requests to verify load balancing..."
        for i in {1..20}; do 
          grpcurl -plaintext -d '{"name": "Test'$i'"}' localhost:50050 hello.HelloService/SayHello
        done

  check-dns:
    desc: "Check DNS resolution for 'server' hostname"
    cmds:
      - docker-compose exec proxy sh -c "apk add --no-cache bind-tools && dig server"

  simulate-rolling-update:
    desc: "Simulate a rolling update by restarting server instances one by one"
    cmds:
      - |
        echo "Starting rolling update simulation..."
        echo "Sending continuous requests in the background..."
        # 一時ファイルを作成してPIDを保存する方法
        PIDFILE=$(mktemp)

        # バックグラウンドでリクエストを送信し続ける
        (while true; do 
          RESP=$(grpcurl -plaintext -d '{"name": "Continuous"}' localhost:50050 hello.HelloService/SayHello 2>&1)
          if [ $? -eq 0 ]; then
            echo -e "\nSuccess: $RESP"
          else
            echo -e "\nError: $RESP"
          fi
          sleep 0.5
        done) &
        echo $! > $PIDFILE

        sleep 10

        # サーバー1をローリング再起動
        echo -e "\n\nStopping server1..."
        docker-compose stop server1
        sleep 5
        echo "Starting server1..."
        docker-compose up -d server1

        sleep 10

        # サーバー2をローリング再起動
        echo -e "\n\nStopping server2..."
        docker-compose stop server2
        sleep 5
        echo "Starting server2..."
        docker-compose up -d server2

        sleep 10

        # サーバー3をローリング再起動
        echo -e "\n\nStopping server3..."
        docker-compose stop server3
        sleep 5
        echo "Starting server3..."
        docker-compose up -d server3

        sleep 10

        # バックグラウンドプロセスを終了
        echo -e "\n\nFinished rolling update simulation"
        if [ -f "$PIDFILE" ]; then
          BG_PID=$(cat $PIDFILE)
          if ps -p $BG_PID > /dev/null; then
            kill $BG_PID || true
            echo "Background process terminated"
          else
            echo "Background process already ended"
          fi
          rm $PIDFILE
        fi
